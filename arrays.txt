several ways we can represent a 2d array

most obvious: nested arrays

[[0, 1, 2],
[3, 4, 5],
[6, 7, 8]]

this is what I initially reached for, but it's a pain to work with because it requires nested loops and managing 2 indices instead of 1

also, annoyingly this is gonna be the opposite of cartesian coordinates - you have to ask for grid[y][x] instead of [x][y]

the next alternative I reached for in TS was a graph using an adjacency list (create a class which a set representing its neighbors)

I like the readability of this approach and it's nice and clean. However there are a couple of issues with porting it to Rust:

- it means cells will have circular references to themselves (Cell A has cell B in its neighbors, which has cell A)
- the way that I've implemented it isn't compatible with Rust rules for ownership and memory management

that made me realize that there is a simpler way to implement it as a flat array. Taking the array above, we can access item[x][y] with

(y * width) + x

for the middle element x = 1 y = 1 so 1 * 3 + 1 = 4 

you can also reverse this to go the other way:

let x = idx % self.width;  // 5 % 3 = 2 (column)
let y = idx / self.width;  // 5 / 3 = 1 (row)